import os
import pathlib

import pytest
import tempfile

import lib.cuckoo.common.config
import lib.cuckoo.core.analysis_manager
import lib.cuckoo.core.database
from lib.cuckoo.common.config import ConfigMeta
from lib.cuckoo.core.database import Database, init_database, reset_database_FOR_TESTING_ONLY


@pytest.fixture
def db():
    reset_database_FOR_TESTING_ONLY()
    try:
        init_database(dsn="sqlite://")
        retval = Database()
        retval.engine.echo = True
        yield retval
    finally:
        reset_database_FOR_TESTING_ONLY()


@pytest.fixture
def tmp_cuckoo_root(monkeypatch, tmp_path):
    monkeypatch.setattr(lib.cuckoo.core.database, "CUCKOO_ROOT", str(tmp_path))
    monkeypatch.setattr(lib.cuckoo.core.analysis_manager, "CUCKOO_ROOT", str(tmp_path))
    yield tmp_path


@pytest.fixture(autouse=True)
def custom_conf_path(request, monkeypatch, tmp_cuckoo_root):
    monkeypatch.setenv("CAPE_DISABLE_ROOT_CONFIGS", "1")
    path: pathlib.Path = tmp_cuckoo_root / "custom" / "conf"
    path.mkdir(mode=0o755, parents=True)
    monkeypatch.setattr(lib.cuckoo.common.config, "CUSTOM_CONF_DIR", str(path))
    ConfigMeta.refresh()
    yield path


@pytest.fixture
def temp_pe32(tmp_path):
    """ Writes a temporary file that libmagic identifies as:
    'PE32 executable Intel 80386, for MS Windows'
    """
    with tempfile.NamedTemporaryFile(mode="wb", delete=False, dir=tmp_path) as f:
        pe_header = b"\x4d\x5a\x90\x00\x03\x00\x00\x00\x04\x00\x00\x00\xff\xff\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x00\x00\x00\x0e\x1f\xba\x0e\x00\xb4\x09\xcd\x21\xb8\x01\x4c\xcd\x21\x54\x68\x69\x73\x20\x70\x72\x6f\x67\x72\x61\x6d\x20\x63\x61\x6e\x6e\x6f\x74\x20\x62\x65\x20\x72\x75\x6e\x20\x69\x6e\x20\x44\x4f\x53\x20\x6d\x6f\x64\x65\x2e\x0d\x0d\x0a\x24\x00\x00\x00\x00\x00\x00\x00\x68\xb2\xb9\x98\x2c\xd3\xd7\xcb\x2c\xd3\xd7\xcb\x2c\xd3\xd7\xcb\x38\xb8\xd4\xca\x24\xd3\xd7\xcb\x38\xb8\xd3\xca\x35\xd3\xd7\xcb\x38\xb8\xd6\xca\x01\xd3\xd7\xcb\x2c\xd3\xd6\xcb\xdf\xd2\xd7\xcb\x38\xb8\xd2\xca\x36\xd3\xd7\xcb\x38\xb8\xde\xca\x00\xd3\xd7\xcb\x38\xb8\x28\xcb\x2d\xd3\xd7\xcb\x38\xb8\xd5\xca\x2d\xd3\xd7\xcb\x52\x69\x63\x68\x2c\xd3\xd7\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x45\x00\x00\x4c\x01\x05\x00\x06\xbc\xdd\xc1\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x02\x01\x0b\x01\x0e\x14\x00\x5e\x06\x00\x00\x60\x31\x00\x00\x00\x00\x00\x80\xe1\x05"
        f.write(pe_header)
    yield f.name
    os.unlink(f.name)

@pytest.fixture
def temp_pe64(tmp_path):
    """ Writes a temporary file that libmagic identifies as:
    'PE32+ executable x86-64, for MS Windows'
    """
    with tempfile.NamedTemporaryFile(mode="wb", delete=False, dir=tmp_path) as f:
        pe_header = b"\x4d\x5a\x90\x00\x03\x00\x00\x00\x04\x00\x00\x00\xff\xff\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x00\x00\x00\x0e\x1f\xba\x0e\x00\xb4\x09\xcd\x21\xb8\x01\x4c\xcd\x21\x54\x68\x69\x73\x20\x70\x72\x6f\x67\x72\x61\x6d\x20\x63\x61\x6e\x6e\x6f\x74\x20\x62\x65\x20\x72\x75\x6e\x20\x69\x6e\x20\x44\x4f\x53\x20\x6d\x6f\x64\x65\x2e\x0d\x0d\x0a\x24\x00\x00\x00\x00\x00\x00\x00\x67\x39\x49\x87\x23\x58\x27\xd4\x23\x58\x27\xd4\x23\x58\x27\xd4\x2a\x20\xb2\xd4\x21\x58\x27\xd4\x2a\x20\xa3\xd4\x37\x58\x27\xd4\x2a\x20\xb4\xd4\x3c\x58\x27\xd4\x23\x58\x26\xd4\x8e\x59\x27\xd4\x2a\x20\xa4\xd4\x66\x58\x27\xd4\x2a\x20\xad\xd4\x0a\x58\x27\xd4\x04\x9e\x59\xd4\x22\x58\x27\xd4\x2a\x20\xb3\xd4\x22\x58\x27\xd4\x2a\x20\xb6\xd4\x22\x58\x27\xd4\x52\x69\x63\x68\x23\x58\x27\xd4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x45\x00\x00\x64\x86\x05\x00\xdd\xd1\x17\x4a\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x00\x22\x00\x0b\x02\x09\x00\x00\xfa\x07\x00\x00\xe2\x07\x00\x00\x00\x00\x00\xa8\xcb\x05"
        f.write(pe_header)
    yield f.name
    os.unlink(f.name)

@pytest.fixture
def temp_elf32(tmp_path):
    """Writes a temporary file that libmagic identifies as:
    'ELF 32-bit LSB'
    """
    with tempfile.NamedTemporaryFile(mode="wb", delete=False, dir=tmp_path) as f:
        f.write(b"\x7f\x45\x4c\x46\x01\x01\x01")
    yield f.name
    os.unlink(f.name)

@pytest.fixture
def temp_elf64(tmp_path):
    """Writes a temporary file that libmagic identifies as:
    'ELF 64-bit LSB'
    """
    with tempfile.NamedTemporaryFile(mode="wb", delete=False, dir=tmp_path) as f:
        f.write(b"\x7f\x45\x4c\x46\x02\x01\x01")
    yield f.name
    os.unlink(f.name)

@pytest.fixture
def temp_macho_arm64(tmp_path):
    """Writes a temporary file that libmagic identifies as:
    'Mach-O 64-bit arm64 executable'
    """
    with tempfile.NamedTemporaryFile(mode="wb", delete=False, dir=tmp_path) as f:
        f.write(b"\xcf\xfa\xed\xfe\x0c\x00\x00\x01\x00\x00\x00\x00\x02\x00\x00\x00")
    yield f.name
    os.unlink(f.name)
